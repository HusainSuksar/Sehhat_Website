# Generated by Django 5.0.1 on 2025-07-23 14:23

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Fee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fee_type', models.CharField(choices=[('tuition', 'Tuition Fee'), ('library', 'Library Fee'), ('laboratory', 'Laboratory Fee'), ('examination', 'Examination Fee'), ('hostel', 'Hostel Fee'), ('transport', 'Transport Fee'), ('miscellaneous', 'Miscellaneous')], default='tuition', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('due_date', models.DateField()),
                ('academic_year', models.CharField(max_length=20)),
                ('semester', models.CharField(blank=True, max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('overdue', 'Overdue'), ('waived', 'Waived')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-due_date'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('credits', models.PositiveIntegerField(default=3)),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('max_students', models.PositiveIntegerField(default=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('instructor', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['doctor', 'badri_mahal_admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses_taught', to=settings.AUTH_USER_MODEL)),
                ('prerequisites', models.ManyToManyField(blank=True, to='students.course')),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('assignment_type', models.CharField(choices=[('homework', 'Homework'), ('project', 'Project'), ('quiz', 'Quiz'), ('exam', 'Exam'), ('presentation', 'Presentation')], default='homework', max_length=20)),
                ('assigned_date', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateTimeField()),
                ('max_points', models.PositiveIntegerField(default=100)),
                ('is_published', models.BooleanField(default=False)),
                ('allow_late_submission', models.BooleanField(default=True)),
                ('late_penalty_percent', models.PositiveIntegerField(default=10)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='students.course')),
            ],
            options={
                'ordering': ['-due_date'],
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('is_global', models.BooleanField(default=False)),
                ('target_level', models.CharField(choices=[('all', 'All Students'), ('undergraduate', 'Undergraduate'), ('postgraduate', 'Postgraduate'), ('doctoral', 'Doctoral')], default='all', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_published', models.BooleanField(default=True)),
                ('is_urgent', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='students.course')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('event_type', models.CharField(choices=[('academic', 'Academic'), ('cultural', 'Cultural'), ('sports', 'Sports'), ('workshop', 'Workshop'), ('seminar', 'Seminar'), ('social', 'Social')], default='academic', max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('location', models.CharField(blank=True, max_length=200)),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('registration_required', models.BooleanField(default=False)),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('is_cancelled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('room', models.CharField(blank=True, max_length=50)),
                ('building', models.CharField(blank=True, max_length=100)),
                ('effective_from', models.DateField()),
                ('effective_until', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='students.course')),
            ],
            options={
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=20, unique=True)),
                ('academic_level', models.CharField(choices=[('undergraduate', 'Undergraduate'), ('postgraduate', 'Postgraduate'), ('doctoral', 'Doctoral'), ('diploma', 'Diploma')], default='undergraduate', max_length=20)),
                ('enrollment_status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('graduated', 'Graduated'), ('withdrawn', 'Withdrawn')], default='active', max_length=20)),
                ('enrollment_date', models.DateField()),
                ('expected_graduation', models.DateField(blank=True, null=True)),
                ('user', models.OneToOneField(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['student_id'],
            },
        ),
        migrations.CreateModel(
            name='Scholarship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('scholarship_type', models.CharField(choices=[('merit', 'Merit-based'), ('need', 'Need-based'), ('sports', 'Sports'), ('research', 'Research'), ('minority', 'Minority')], default='merit', max_length=20)),
                ('academic_year', models.CharField(max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('applied', 'Applied'), ('approved', 'Approved'), ('disbursed', 'Disbursed'), ('rejected', 'Rejected')], default='applied', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scholarships', to='students.student')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('card', 'Credit/Debit Card'), ('transfer', 'Bank Transfer'), ('cheque', 'Cheque'), ('online', 'Online Payment')], default='cash', max_length=20)),
                ('transaction_id', models.CharField(blank=True, max_length=100)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('receipt_number', models.CharField(max_length=50, unique=True)),
                ('notes', models.TextField(blank=True)),
                ('fee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='students.fee')),
                ('received_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='students.student')),
            ],
            options={
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='LibraryRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_title', models.CharField(max_length=200)),
                ('book_isbn', models.CharField(blank=True, max_length=20)),
                ('author', models.CharField(blank=True, max_length=200)),
                ('borrowed_date', models.DateField()),
                ('due_date', models.DateField()),
                ('returned_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('borrowed', 'Borrowed'), ('returned', 'Returned'), ('overdue', 'Overdue'), ('lost', 'Lost')], default='borrowed', max_length=20)),
                ('fine_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('fine_paid', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='library_records', to='students.student')),
            ],
            options={
                'ordering': ['-borrowed_date'],
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('leader', 'Leader'), ('co_leader', 'Co-Leader')], default='member', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.student')),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.FloatField()),
                ('max_points', models.FloatField()),
                ('percentage', models.FloatField()),
                ('letter_grade', models.CharField(blank=True, max_length=3)),
                ('date_graded', models.DateTimeField(auto_now_add=True)),
                ('comments', models.TextField(blank=True)),
                ('assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='students.assignment')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='students.course')),
                ('graded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='students.student')),
            ],
            options={
                'ordering': ['-date_graded'],
            },
        ),
        migrations.AddField(
            model_name='fee',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fees', to='students.student'),
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('academic', 'Academic Excellence'), ('research', 'Research'), ('sports', 'Sports'), ('cultural', 'Cultural'), ('leadership', 'Leadership'), ('community', 'Community Service')], default='academic', max_length=20)),
                ('date_awarded', models.DateField()),
                ('awarded_by', models.CharField(max_length=200)),
                ('certificate_file', models.FileField(blank=True, null=True, upload_to='achievements/')),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='students.student')),
            ],
            options={
                'ordering': ['-date_awarded'],
            },
        ),
        migrations.CreateModel(
            name='StudentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('group_type', models.CharField(choices=[('study_group', 'Study Group'), ('project_team', 'Project Team'), ('club', 'Student Club'), ('committee', 'Committee')], default='study_group', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('max_members', models.PositiveIntegerField(default=10)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('leader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='led_groups', to='students.student')),
                ('members', models.ManyToManyField(through='students.GroupMembership', to='students.student')),
            ],
        ),
        migrations.AddField(
            model_name='groupmembership',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.studentgroup'),
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('its_id', models.CharField(max_length=8, unique=True, validators=[django.core.validators.RegexValidator(message='ITS ID must be exactly 8 digits', regex='^\\d{8}$')])),
                ('college', models.CharField(max_length=100)),
                ('specialization', models.CharField(max_length=100)),
                ('year_of_study', models.PositiveIntegerField(choices=[(1, 'First Year'), (2, 'Second Year'), (3, 'Third Year'), (4, 'Fourth Year'), (5, 'Fifth Year'), (6, 'Sixth Year'), (7, 'Postgraduate')], default=1)),
                ('enrollment_date', models.DateField()),
                ('expected_graduation', models.DateField(blank=True, null=True)),
                ('current_semester', models.CharField(blank=True, max_length=20, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=15, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('current_address', models.TextField(blank=True, null=True)),
                ('permanent_address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('current_cgpa', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(4.0)])),
                ('total_credit_hours', models.PositiveIntegerField(default=0)),
                ('interests', models.TextField(blank=True, help_text='Academic and personal interests', null=True)),
                ('career_goals', models.TextField(blank=True, null=True)),
                ('languages_spoken', models.CharField(blank=True, max_length=200, null=True)),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, null=True)),
                ('medical_conditions', models.TextField(blank=True, null=True)),
                ('scholarship_recipient', models.BooleanField(default=False)),
                ('financial_aid_required', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Profile',
                'verbose_name_plural': 'Student Profiles',
                'ordering': ['its_id'],
            },
        ),
        migrations.CreateModel(
            name='StudentMeeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting_type', models.CharField(choices=[('academic_advising', 'Academic Advising'), ('career_counseling', 'Career Counseling'), ('personal_counseling', 'Personal Counseling'), ('disciplinary', 'Disciplinary Meeting'), ('financial_consultation', 'Financial Consultation'), ('health_consultation', 'Health Consultation'), ('mentorship', 'Mentorship Session'), ('progress_review', 'Progress Review'), ('goal_setting', 'Goal Setting'), ('conflict_resolution', 'Conflict Resolution'), ('emergency_consultation', 'Emergency Consultation'), ('routine_checkin', 'Routine Check-in')], max_length=30)),
                ('scheduled_date', models.DateTimeField()),
                ('estimated_duration_minutes', models.PositiveIntegerField(default=30)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('meeting_format', models.CharField(choices=[('in_person', 'In Person'), ('video_call', 'Video Call'), ('phone_call', 'Phone Call')], default='in_person', max_length=20)),
                ('agenda', models.TextField(help_text='Topics to be discussed in the meeting')),
                ('student_concerns', models.TextField(blank=True, help_text='Specific concerns raised by the student', null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'Student No-Show'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=20)),
                ('actual_duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('action_items', models.TextField(blank=True, null=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('outcome_rating', models.PositiveIntegerField(blank=True, help_text='Facilitator rating of meeting outcome (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('student_satisfaction', models.PositiveIntegerField(blank=True, help_text='Student satisfaction rating (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_confidential', models.BooleanField(default=True)),
                ('confidentiality_notes', models.TextField(blank=True, help_text='Special confidentiality considerations', null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('cancellation_reason', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_meetings', to=settings.AUTH_USER_MODEL)),
                ('facilitator', models.ForeignKey(limit_choices_to={'role__in': ['doctor', 'badri_mahal_admin', 'aamil']}, on_delete=django.db.models.deletion.CASCADE, related_name='facilitated_meetings', to=settings.AUTH_USER_MODEL)),
                ('rescheduled_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rescheduled_to', to='students.studentmeeting')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meetings', to='students.studentprofile')),
            ],
            options={
                'verbose_name': 'Student Meeting',
                'verbose_name_plural': 'Student Meetings',
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement_type', models.CharField(choices=[('academic_excellence', 'Academic Excellence'), ('research_publication', 'Research Publication'), ('conference_presentation', 'Conference Presentation'), ('competition_winner', 'Competition Winner'), ('leadership_role', 'Leadership Role'), ('community_service', 'Community Service'), ('volunteer_work', 'Volunteer Work'), ('internship_completion', 'Internship Completion'), ('certification_earned', 'Professional Certification'), ('skill_development', 'Skill Development'), ('mentorship_success', 'Successful Mentorship'), ('extracurricular_excellence', 'Extracurricular Excellence'), ('innovation_project', 'Innovation Project'), ('cultural_contribution', 'Cultural Contribution'), ('sports_achievement', 'Sports Achievement'), ('milestone_completion', 'Academic Milestone')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('achievement_date', models.DateField()),
                ('category', models.CharField(choices=[('academic', 'Academic'), ('research', 'Research'), ('leadership', 'Leadership'), ('service', 'Community Service'), ('personal', 'Personal Development'), ('professional', 'Professional'), ('creative', 'Creative/Artistic'), ('athletic', 'Athletic')], default='academic', max_length=20)),
                ('significance_level', models.CharField(choices=[('local', 'Local/Institutional'), ('regional', 'Regional'), ('national', 'National'), ('international', 'International')], default='local', max_length=20)),
                ('recognizing_organization', models.CharField(help_text='Organization or entity that recognized this achievement', max_length=200)),
                ('certificate_file', models.FileField(blank=True, help_text='Upload certificate or documentation', null=True, upload_to='student_achievements/')),
                ('supporting_documents', models.FileField(blank=True, help_text='Additional supporting documents', null=True, upload_to='student_achievements/supporting/')),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('verification_notes', models.TextField(blank=True, null=True)),
                ('skills_developed', models.TextField(blank=True, help_text='What skills were developed through this achievement?', null=True)),
                ('impact_description', models.TextField(blank=True, help_text='What impact did this achievement have?', null=True)),
                ('featured_achievement', models.BooleanField(default=False, help_text='Feature this achievement in student highlights')),
                ('public_visibility', models.BooleanField(default=True, help_text='Make this achievement visible to other students')),
                ('recorded_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for searching and categorization', max_length=500, null=True)),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recorded_achievements', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_student_achievements', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracked_achievements', to='students.studentprofile')),
            ],
            options={
                'verbose_name': 'Student Achievement',
                'verbose_name_plural': 'Student Achievements',
                'ordering': ['-achievement_date', '-recorded_date'],
            },
        ),
        migrations.CreateModel(
            name='MentorshipRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mentorship_type', models.CharField(choices=[('academic', 'Academic Guidance'), ('career', 'Career Counseling'), ('research', 'Research Mentorship'), ('personal', 'Personal Development'), ('professional', 'Professional Skills'), ('leadership', 'Leadership Development')], default='academic', max_length=30)),
                ('preferred_mentor_specialization', models.CharField(blank=True, max_length=100, null=True)),
                ('preferred_mentor_gender', models.CharField(choices=[('any', 'No Preference'), ('male', 'Male'), ('female', 'Female')], default='any', max_length=10)),
                ('description', models.TextField(help_text='Describe what kind of mentorship you are seeking')),
                ('goals', models.TextField(help_text='What do you hope to achieve through this mentorship?')),
                ('specific_areas', models.TextField(blank=True, help_text='Specific areas where you need guidance', null=True)),
                ('preferred_meeting_frequency', models.CharField(choices=[('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('as_needed', 'As Needed')], default='monthly', max_length=20)),
                ('preferred_meeting_format', models.CharField(choices=[('in_person', 'In Person'), ('video_call', 'Video Call'), ('phone_call', 'Phone Call'), ('email', 'Email'), ('flexible', 'Flexible')], default='flexible', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved - Seeking Mentor'), ('matched', 'Matched with Mentor'), ('active', 'Active Mentorship'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('requested_date', models.DateTimeField(auto_now_add=True)),
                ('approved_date', models.DateTimeField(blank=True, null=True)),
                ('matched_date', models.DateTimeField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('expected_end_date', models.DateField(blank=True, null=True)),
                ('actual_end_date', models.DateField(blank=True, null=True)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('student_satisfaction_rating', models.PositiveIntegerField(blank=True, help_text='Student satisfaction rating (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('mentor_effectiveness_rating', models.PositiveIntegerField(blank=True, help_text='Mentor effectiveness rating (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('student_feedback', models.TextField(blank=True, null=True)),
                ('mentor_feedback', models.TextField(blank=True, null=True)),
                ('assigned_mentor', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['doctor', 'badri_mahal_admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mentored_students', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_mentorship_requests', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentorship_requests', to='students.studentprofile')),
            ],
            options={
                'verbose_name': 'Mentorship Request',
                'verbose_name_plural': 'Mentorship Requests',
                'ordering': ['-requested_date'],
            },
        ),
        migrations.CreateModel(
            name='AidRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aid_type', models.CharField(choices=[('emergency', 'Emergency Financial Aid'), ('tuition', 'Tuition Assistance'), ('medical', 'Medical Expense Aid'), ('textbook', 'Textbook/Material Aid'), ('transportation', 'Transportation Aid'), ('housing', 'Housing/Accommodation Aid'), ('technology', 'Technology/Equipment Aid'), ('food', 'Food/Meal Aid'), ('examination', 'Examination Fee Aid'), ('research', 'Research Project Funding'), ('conference', 'Conference/Travel Aid'), ('other', 'Other Financial Need')], max_length=30)),
                ('amount_requested', models.DecimalField(decimal_places=2, help_text='Amount requested in USD', max_digits=10)),
                ('urgency_level', models.CharField(choices=[('low', 'Low - Can wait 2-4 weeks'), ('medium', 'Medium - Needed within 2 weeks'), ('high', 'High - Needed within 1 week'), ('emergency', 'Emergency - Needed immediately')], default='medium', max_length=20)),
                ('reason_for_request', models.TextField(help_text='Detailed explanation of why this aid is needed')),
                ('circumstances', models.TextField(help_text='Describe the circumstances that led to this financial need')),
                ('attempted_solutions', models.TextField(blank=True, help_text='What steps have you already taken to address this need?', null=True)),
                ('family_income_bracket', models.CharField(choices=[('under_10k', 'Under $10,000'), ('10k_25k', '$10,000 - $25,000'), ('25k_50k', '$25,000 - $50,000'), ('50k_75k', '$50,000 - $75,000'), ('75k_100k', '$75,000 - $100,000'), ('over_100k', 'Over $100,000'), ('prefer_not_say', 'Prefer not to say')], default='prefer_not_say', max_length=20)),
                ('has_other_aid', models.BooleanField(default=False, help_text='Are you receiving aid from other sources?')),
                ('other_aid_details', models.TextField(blank=True, null=True)),
                ('supporting_documents', models.FileField(blank=True, help_text='Upload any supporting documents (receipts, bills, etc.)', null=True, upload_to='aid_requests/')),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('under_review', 'Under Review'), ('additional_info_needed', 'Additional Information Needed'), ('approved', 'Approved'), ('partially_approved', 'Partially Approved'), ('rejected', 'Rejected'), ('disbursed', 'Aid Disbursed'), ('closed', 'Case Closed')], default='submitted', max_length=30)),
                ('approved_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('approval_conditions', models.TextField(blank=True, null=True)),
                ('disbursement_method', models.CharField(blank=True, choices=[('bank_transfer', 'Bank Transfer'), ('check', 'Check'), ('cash', 'Cash'), ('direct_payment', 'Direct Payment to Vendor'), ('account_credit', 'Account Credit')], max_length=20, null=True)),
                ('disbursed_date', models.DateTimeField(blank=True, null=True)),
                ('reviewer_notes', models.TextField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('submitted_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('is_confidential', models.BooleanField(default=True, help_text='Keep this request confidential from other students')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_aid_requests', to=settings.AUTH_USER_MODEL)),
                ('disbursed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='disbursed_aid_requests', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aid_requests', to='students.studentprofile')),
            ],
            options={
                'verbose_name': 'Financial Aid Request',
                'verbose_name_plural': 'Financial Aid Requests',
                'ordering': ['-submitted_date'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('enrolled', 'Enrolled'), ('completed', 'Completed'), ('dropped', 'Dropped'), ('failed', 'Failed')], default='enrolled', max_length=20)),
                ('enrolled_date', models.DateTimeField(auto_now_add=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('grade', models.CharField(blank=True, max_length=5)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='students.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='students.student')),
            ],
            options={
                'ordering': ['-enrolled_date'],
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('excused', 'Excused')], default='present', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='students.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='students.student')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('student', 'course', 'date')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='groupmembership',
            unique_together={('group', 'student')},
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True)),
                ('file_upload', models.FileField(blank=True, null=True, upload_to='submissions/')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('is_late', models.BooleanField(default=False)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('is_graded', models.BooleanField(default=False)),
                ('grade_percentage', models.FloatField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='students.assignment')),
                ('graded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_submissions', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='students.student')),
            ],
            options={
                'ordering': ['-submitted_at'],
                'unique_together': {('assignment', 'student', 'attempt_number')},
            },
        ),
    ]
