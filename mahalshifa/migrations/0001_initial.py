# Generated by Django 5.0.1 on 2025-08-20 12:32

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('moze', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admission_type', models.CharField(choices=[('emergency', 'Emergency'), ('elective', 'Elective'), ('urgent', 'Urgent'), ('observation', 'Observation')], max_length=20)),
                ('admission_date', models.DateTimeField()),
                ('expected_discharge_date', models.DateField(blank=True, null=True)),
                ('chief_complaint', models.TextField()),
                ('diagnosis', models.TextField()),
                ('treatment_plan', models.TextField()),
                ('status', models.CharField(choices=[('admitted', 'Admitted'), ('transferred', 'Transferred'), ('discharged', 'Discharged'), ('deceased', 'Deceased')], default='admitted', max_length=20)),
                ('bed_number', models.CharField(blank=True, max_length=10)),
                ('admission_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-admission_date'],
            },
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('address', models.TextField()),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('hospital_type', models.CharField(choices=[('general', 'General Hospital'), ('specialty', 'Specialty Hospital'), ('clinic', 'Clinic'), ('emergency', 'Emergency Center'), ('rehabilitation', 'Rehabilitation Center')], default='general', max_length=20)),
                ('total_beds', models.PositiveIntegerField(default=0)),
                ('available_beds', models.PositiveIntegerField(default=0)),
                ('emergency_beds', models.PositiveIntegerField(default=0)),
                ('icu_beds', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_emergency_capable', models.BooleanField(default=False)),
                ('has_pharmacy', models.BooleanField(default=False)),
                ('has_laboratory', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.CharField(choices=[('consultation', 'General Consultation'), ('specialist', 'Specialist Consultation'), ('diagnostic', 'Diagnostic Services'), ('treatment', 'Treatment'), ('preventive', 'Preventive Care'), ('emergency', 'Emergency Services'), ('rehabilitation', 'Rehabilitation'), ('mental_health', 'Mental Health')], default='consultation', max_length=50)),
                ('duration_minutes', models.PositiveIntegerField(default=30)),
                ('cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('requires_appointment', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Medical Service',
                'verbose_name_plural': 'Medical Services',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('generic_name', models.CharField(blank=True, max_length=200)),
                ('brand_name', models.CharField(blank=True, max_length=200)),
                ('medication_type', models.CharField(choices=[('tablet', 'Tablet'), ('capsule', 'Capsule'), ('syrup', 'Syrup'), ('injection', 'Injection'), ('cream', 'Cream/Ointment'), ('drops', 'Drops'), ('inhaler', 'Inhaler'), ('other', 'Other')], max_length=20)),
                ('strength', models.CharField(help_text='e.g., 500mg, 10ml', max_length=50)),
                ('manufacturer', models.CharField(blank=True, max_length=200)),
                ('side_effects', models.TextField(blank=True)),
                ('contraindications', models.TextField(blank=True)),
                ('storage_conditions', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('requires_prescription', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('floor_number', models.CharField(blank=True, max_length=10)),
                ('phone_extension', models.CharField(blank=True, max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('head', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='headed_departments', to=settings.AUTH_USER_MODEL)),
                ('hospital', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='mahalshifa.hospital')),
            ],
            options={
                'ordering': ['hospital', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('specialization', models.CharField(max_length=100)),
                ('qualification', models.CharField(max_length=200)),
                ('experience_years', models.PositiveIntegerField(default=0)),
                ('is_available', models.BooleanField(default=True)),
                ('is_emergency_doctor', models.BooleanField(default=False)),
                ('consultation_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctors', to='mahalshifa.department')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mahalshifa_doctor_profile', to=settings.AUTH_USER_MODEL)),
                ('hospital', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctors', to='mahalshifa.hospital')),
            ],
        ),
        migrations.CreateModel(
            name='Discharge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discharge_date', models.DateTimeField()),
                ('discharge_type', models.CharField(choices=[('normal', 'Normal Discharge'), ('ama', 'Against Medical Advice'), ('transfer', 'Transfer to Another Facility'), ('deceased', 'Deceased'), ('absconded', 'Absconded')], default='normal', max_length=20)),
                ('final_diagnosis', models.TextField()),
                ('treatment_summary', models.TextField()),
                ('discharge_medications', models.TextField(blank=True)),
                ('follow_up_instructions', models.TextField()),
                ('next_appointment', models.DateTimeField(blank=True, null=True)),
                ('condition_at_discharge', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('critical', 'Critical')], max_length=20)),
                ('discharge_summary', models.TextField()),
                ('discharge_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('admission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='discharge', to='mahalshifa.admission')),
                ('discharging_doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discharged_patients', to='mahalshifa.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateField()),
                ('appointment_time', models.TimeField()),
                ('duration_minutes', models.PositiveIntegerField(default=30)),
                ('reason', models.TextField(help_text='Reason for appointment')),
                ('symptoms', models.TextField(blank=True, help_text='Patient symptoms', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('checked_in', 'Checked In'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=20)),
                ('appointment_type', models.CharField(choices=[('regular', 'Regular Appointment'), ('follow_up', 'Follow-up'), ('urgent', 'Urgent'), ('emergency', 'Emergency'), ('screening', 'Health Screening'), ('consultation', 'Consultation')], default='regular', max_length=20)),
                ('booking_method', models.CharField(choices=[('online', 'Online Booking'), ('phone', 'Phone Call'), ('walk_in', 'Walk-in'), ('staff', 'Booked by Staff')], default='online', max_length=20)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('reminder_sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booked_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mahalshifa_booked_appointments', to=settings.AUTH_USER_MODEL)),
                ('moze', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='moze.moze')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='mahalshifa.doctor')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mahalshifa.medicalservice')),
            ],
            options={
                'verbose_name': 'Appointment',
                'verbose_name_plural': 'Appointments',
                'ordering': ['appointment_date', 'appointment_time'],
            },
        ),
        migrations.AddField(
            model_name='admission',
            name='admitting_doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admitted_patients', to='mahalshifa.doctor'),
        ),
        migrations.AddField(
            model_name='admission',
            name='hospital',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admissions', to='mahalshifa.hospital'),
        ),
        migrations.CreateModel(
            name='HospitalStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staff_type', models.CharField(choices=[('nurse', 'Nurse'), ('technician', 'Technician'), ('pharmacist', 'Pharmacist'), ('administrator', 'Administrator'), ('receptionist', 'Receptionist'), ('security', 'Security'), ('maintenance', 'Maintenance'), ('other', 'Other')], max_length=20)),
                ('employee_id', models.CharField(max_length=20, unique=True)),
                ('shift', models.CharField(choices=[('morning', 'Morning'), ('evening', 'Evening'), ('night', 'Night'), ('rotating', 'Rotating')], default='morning', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('hire_date', models.DateField()),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff', to='mahalshifa.department')),
                ('hospital', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff', to='mahalshifa.hospital')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='hospital_staff', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('inventory_type', models.CharField(choices=[('medication', 'Medications'), ('equipment', 'Medical Equipment'), ('supplies', 'Medical Supplies'), ('consumables', 'Consumables'), ('furniture', 'Furniture'), ('other', 'Other')], max_length=20)),
                ('storage_location', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventories', to='mahalshifa.department')),
                ('hospital', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventories', to='mahalshifa.hospital')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('item_code', models.CharField(max_length=50, unique=True)),
                ('category', models.CharField(max_length=100)),
                ('current_stock', models.PositiveIntegerField(default=0)),
                ('minimum_stock', models.PositiveIntegerField(default=0)),
                ('maximum_stock', models.PositiveIntegerField(default=0)),
                ('unit', models.CharField(default='units', max_length=20)),
                ('unit_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('supplier', models.CharField(blank=True, max_length=200)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('last_restocked', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('requires_prescription', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='mahalshifa.inventory')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(max_length=200)),
                ('test_category', models.CharField(choices=[('blood', 'Blood Test'), ('urine', 'Urine Test'), ('stool', 'Stool Test'), ('imaging', 'Imaging'), ('biopsy', 'Biopsy'), ('culture', 'Culture'), ('other', 'Other')], default='blood', max_length=50)),
                ('test_code', models.CharField(blank=True, max_length=20, null=True)),
                ('ordered_date', models.DateField(auto_now_add=True)),
                ('sample_collected_date', models.DateField(blank=True, null=True)),
                ('result_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ordered', 'Ordered'), ('sample_collected', 'Sample Collected'), ('in_lab', 'In Laboratory'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='ordered', max_length=20)),
                ('result_text', models.TextField(blank=True, null=True)),
                ('result_file', models.FileField(blank=True, null=True, upload_to='lab_results/')),
                ('normal_range', models.CharField(blank=True, max_length=200, null=True)),
                ('is_abnormal', models.BooleanField(default=False)),
                ('lab_name', models.CharField(blank=True, max_length=100, null=True)),
                ('lab_technician', models.CharField(blank=True, max_length=100, null=True)),
                ('doctor_notes', models.TextField(blank=True, null=True)),
                ('lab_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ordered_lab_tests', to='mahalshifa.doctor')),
            ],
            options={
                'verbose_name': 'Lab Test',
                'verbose_name_plural': 'Lab Tests',
                'ordering': ['-ordered_date'],
            },
        ),
        migrations.CreateModel(
            name='LabResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_data', models.JSONField(default=dict, help_text='Test results in JSON format')),
                ('result_summary', models.TextField()),
                ('normal_ranges', models.JSONField(default=dict, help_text='Normal value ranges')),
                ('is_normal', models.BooleanField(default=True)),
                ('critical_values', models.TextField(blank=True)),
                ('interpretation', models.TextField(blank=True)),
                ('recommendations', models.TextField(blank=True)),
                ('test_method', models.CharField(blank=True, max_length=100)),
                ('equipment_used', models.CharField(blank=True, max_length=100)),
                ('quality_control_passed', models.BooleanField(default=True)),
                ('qc_notes', models.TextField(blank=True)),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reported_at', models.DateTimeField(blank=True, null=True)),
                ('technician', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_tests', to=settings.AUTH_USER_MODEL)),
                ('lab_test', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='mahalshifa.labtest')),
            ],
            options={
                'ordering': ['-completed_at'],
            },
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consultation_date', models.DateTimeField(auto_now_add=True)),
                ('chief_complaint', models.TextField(help_text='Main complaint or reason for visit')),
                ('history_of_present_illness', models.TextField(blank=True, null=True)),
                ('past_medical_history', models.TextField(blank=True, null=True)),
                ('family_history', models.TextField(blank=True, null=True)),
                ('social_history', models.TextField(blank=True, null=True)),
                ('vital_signs', models.JSONField(default=dict, help_text='Blood pressure, temperature, pulse, etc.')),
                ('physical_examination', models.TextField(blank=True, null=True)),
                ('diagnosis', models.TextField()),
                ('differential_diagnosis', models.TextField(blank=True, null=True)),
                ('treatment_plan', models.TextField()),
                ('medications_prescribed', models.TextField(blank=True, null=True)),
                ('lab_tests_ordered', models.TextField(blank=True, null=True)),
                ('imaging_ordered', models.TextField(blank=True, null=True)),
                ('referrals', models.TextField(blank=True, null=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('follow_up_instructions', models.TextField(blank=True, null=True)),
                ('patient_education', models.TextField(blank=True, help_text='Patient education provided', null=True)),
                ('doctor_notes', models.TextField(blank=True, help_text='Private doctor notes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_record', to='mahalshifa.appointment')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='mahalshifa.doctor')),
                ('moze', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='moze.moze')),
            ],
            options={
                'verbose_name': 'Medical Record',
                'verbose_name_plural': 'Medical Records',
                'ordering': ['-consultation_date'],
            },
        ),
        migrations.AddField(
            model_name='labtest',
            name='medical_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_tests', to='mahalshifa.medicalrecord'),
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('its_id', models.CharField(max_length=8, unique=True, validators=[django.core.validators.RegexValidator(message='ITS ID must be exactly 8 digits', regex='^\\d{8}$')])),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('arabic_name', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('phone_number', models.CharField(max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.TextField()),
                ('emergency_contact_name', models.CharField(max_length=100)),
                ('emergency_contact_phone', models.CharField(max_length=15)),
                ('emergency_contact_relationship', models.CharField(max_length=50)),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, null=True)),
                ('allergies', models.TextField(blank=True, help_text='Known allergies', null=True)),
                ('chronic_conditions', models.TextField(blank=True, help_text='Chronic medical conditions', null=True)),
                ('current_medications', models.TextField(blank=True, help_text='Current medications', null=True)),
                ('registration_date', models.DateField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('registered_moze', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registered_patients', to='moze.moze')),
                ('user_account', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patient_record', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='mahalshifa.patient'),
        ),
        migrations.AddField(
            model_name='labtest',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_tests', to='mahalshifa.patient'),
        ),
        migrations.CreateModel(
            name='Insurance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insurance_company', models.CharField(max_length=200)),
                ('policy_number', models.CharField(max_length=100)),
                ('group_number', models.CharField(blank=True, max_length=100)),
                ('coverage_type', models.CharField(choices=[('basic', 'Basic Coverage'), ('standard', 'Standard Coverage'), ('premium', 'Premium Coverage'), ('comprehensive', 'Comprehensive')], max_length=20)),
                ('coverage_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('deductible', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('co_pay_percentage', models.FloatField(default=0)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('pre_authorization_required', models.BooleanField(default=False)),
                ('network_hospitals', models.TextField(blank=True)),
                ('exclusions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insurance_policies', to='mahalshifa.patient')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('relationship', models.CharField(max_length=50)),
                ('phone_primary', models.CharField(max_length=20)),
                ('phone_secondary', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('address', models.TextField(blank=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('priority_order', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_contacts', to='mahalshifa.patient')),
            ],
            options={
                'ordering': ['patient', 'priority_order'],
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='mahalshifa.patient'),
        ),
        migrations.AddField(
            model_name='admission',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admissions', to='mahalshifa.patient'),
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_date', models.DateField(auto_now_add=True)),
                ('medication_name', models.CharField(max_length=200)),
                ('dosage', models.CharField(max_length=100)),
                ('frequency', models.CharField(help_text='How often to take the medication', max_length=100)),
                ('duration', models.CharField(help_text='Duration of treatment', max_length=100)),
                ('quantity', models.CharField(help_text='Quantity to dispense', max_length=50)),
                ('instructions', models.TextField(help_text='Special instructions for taking the medication')),
                ('warnings', models.TextField(blank=True, help_text='Warnings and precautions', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_dispensed', models.BooleanField(default=False)),
                ('dispensed_date', models.DateField(blank=True, null=True)),
                ('dispensed_by', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='mahalshifa.doctor')),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='mahalshifa.medicalrecord')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='mahalshifa.patient')),
            ],
            options={
                'verbose_name': 'Prescription',
                'verbose_name_plural': 'Prescriptions',
                'ordering': ['-prescription_date'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.CharField(max_length=20)),
                ('room_type', models.CharField(choices=[('general', 'General Ward'), ('private', 'Private Room'), ('icu', 'ICU'), ('emergency', 'Emergency Room'), ('operation', 'Operation Theater'), ('consultation', 'Consultation Room'), ('laboratory', 'Laboratory'), ('pharmacy', 'Pharmacy')], max_length=20)),
                ('capacity', models.PositiveIntegerField(default=1)),
                ('floor_number', models.CharField(max_length=10)),
                ('is_available', models.BooleanField(default=True)),
                ('is_operational', models.BooleanField(default=True)),
                ('has_ac', models.BooleanField(default=False)),
                ('has_wifi', models.BooleanField(default=False)),
                ('has_tv', models.BooleanField(default=False)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='mahalshifa.department')),
                ('hospital', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='mahalshifa.hospital')),
            ],
            options={
                'ordering': ['hospital', 'floor_number', 'room_number'],
                'unique_together': {('hospital', 'room_number')},
            },
        ),
        migrations.AddField(
            model_name='admission',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admissions', to='mahalshifa.room'),
        ),
        migrations.CreateModel(
            name='TreatmentMedication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dosage', models.CharField(max_length=100)),
                ('frequency', models.CharField(max_length=100)),
                ('duration', models.CharField(max_length=100)),
                ('instructions', models.TextField(blank=True)),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mahalshifa.medication')),
            ],
        ),
        migrations.CreateModel(
            name='TreatmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('objectives', models.TextField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('duration_weeks', models.PositiveIntegerField(blank=True, null=True)),
                ('therapies', models.TextField(blank=True)),
                ('lifestyle_changes', models.TextField(blank=True)),
                ('dietary_restrictions', models.TextField(blank=True)),
                ('monitoring_schedule', models.TextField(blank=True)),
                ('success_criteria', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('modified', 'Modified'), ('discontinued', 'Discontinued')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='mahalshifa.doctor')),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='mahalshifa.medicalrecord')),
                ('medications', models.ManyToManyField(blank=True, through='mahalshifa.TreatmentMedication', to='mahalshifa.medication')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='mahalshifa.patient')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='treatmentmedication',
            name='treatment_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mahalshifa.treatmentplan'),
        ),
        migrations.CreateModel(
            name='VitalSigns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('systolic_bp', models.PositiveIntegerField(blank=True, help_text='Systolic Blood Pressure (mmHg)', null=True)),
                ('diastolic_bp', models.PositiveIntegerField(blank=True, help_text='Diastolic Blood Pressure (mmHg)', null=True)),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='Heart Rate (bpm)', null=True)),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Respiratory Rate (breaths/min)', null=True)),
                ('temperature', models.FloatField(blank=True, help_text='Temperature (°C)', null=True)),
                ('oxygen_saturation', models.PositiveIntegerField(blank=True, help_text='Oxygen Saturation (%)', null=True)),
                ('weight', models.FloatField(blank=True, help_text='Weight (kg)', null=True)),
                ('height', models.FloatField(blank=True, help_text='Height (cm)', null=True)),
                ('bmi', models.FloatField(blank=True, help_text='Body Mass Index', null=True)),
                ('pain_scale', models.PositiveIntegerField(blank=True, choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')], help_text='Pain scale 0-10', null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('medical_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vital_signs_records', to='mahalshifa.medicalrecord')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='mahalshifa.patient')),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vital Signs',
                'verbose_name_plural': 'Vital Signs',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='appointment',
            unique_together={('doctor', 'appointment_date', 'appointment_time')},
        ),
    ]
